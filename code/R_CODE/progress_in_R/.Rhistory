if(isGood(quarters1[1])){
if(isBad(quarters1[2])){
if(isBad(quarters1[3])){
df.bad.growth <- rbind(df.bad.growth,
df[which(df$city == df_increasing_cities[i,1] & df$state == df_increasing_cities[i,2]),c("city","state")])
}
}
}
}
if(length(quarters1) == 2)
{
if(isGood(quarters1[1])){
if(isBad(quarters1[2])){
df.bad.growth <- rbind(df.bad.growth,
df[which(df$city == df_increasing_cities[i,1] & df$state == df_increasing_cities[i,2]),c("city","state")])
}
}
}
} #end for
return(unique(df.bad.growth))
}
###################################################################################################
###################################################################################################
getGoodGrowth <- function(df_increasing_cities, df){
#Grammar for Good Growth
# S  -> S4 | S3 | S2
# S4 -> (B) (B) (G) (G)
# S3 -> (B) (G) (G)
# S2 -> (B) (G)
# B  -> (1|2)
# G  -> (6|8)
df.good.growth = data.frame(city=c(), state=c())
for(i in 1:nrow(df_increasing_cities)){
ex2 <- df[which(df$city == df_increasing_cities[i,1] & df$state == df_increasing_cities[i,2]),c("cluster")]
quarters2 <- getQuarters(ex2)
quarters2 <- quarters2[!is.na(quarters2)]
# By not having restrictions on quarters1[1] or quarters[2], we can get 153 results instead of just 63
if(length(quarters2) == 4)
{
if(isBad(quarters2[1])){
if(isGood(quarters2[2])){
if(isGood(quarters2[3])){
if(isGood(quarters2[4])){
df.good.growth <- rbind(df.good.growth,
df[which(df$city == df_increasing_cities[i,1] &
df$state == df_increasing_cities[i,2]), c("city","state")])
}
}
}
}
}
if(length(quarters2) == 3)
{
if(isBad(quarters2[1])){
if(isGood(quarters2[2])){
if(isGood(quarters2[3])){
df.good.growth <- rbind(df.good.growth,
df[which(df$city == df_increasing_cities[i,1] &
df$state == df_increasing_cities[i,2]),c("city","state")])
}
}
}
}
if(length(quarters2) == 2)
{
if(isBad(quarters2[1])){
if(isGood(quarters2[2])){
df.good.growth <- rbind(df.good.growth,
df[which(df$city == df_increasing_cities[i,1] &
df$state == df_increasing_cities[i,2]),c("city","state")])
}
}
}
} #end for
return(unique(df.good.growth))
}
###################################################################################################
# Function: getPopulationChangersIncreasing
# Objective:
# - Pass a huge list of dataframes containing each city and all its features over time
# - Collect all of the unique city-states that find themself increasing from beginning to end
###################################################################################################
getPopulationChangersIncreasing <- function(df.list.crime.changers, thresh=NULL){
df.all.changers <- data.frame(city=c(), state=c())
for(i in 1:length(df.list.crime.changers)){
ls1 <- unique(df.list.crime.changers[[i]][,"population"])
hits <- df.list.crime.changers[[i]][,"population"]
# Capture growing cities
if(hits[1] <= hits[length(hits)]){
if(!missing(thresh))
{
if(max(hits) >= thresh){
cat("Skipping iteration ", i, " because of max population threshold given.\n")
next
}
}
df.all.changers <- rbind(df.all.changers, unique(df.list.crime.changers[[i]][,c("city","state")]))
}
}
# Update constants
DF_UNIQUE_ASC_POP_CITY_STATE <- df.all.changers
return(df.all.changers)
}
###################################################################################################
###################################################################################################
getPopulationChangersDecreasing <- function(df.list.crime.changers, thresh=NULL){
df.all.changers <- data.frame(city=c(), state=c())
for(i in 1:length(df.list.crime.changers)){
ls1 <- unique(df.list.crime.changers[[i]][,"population"])
hits <- df.list.crime.changers[[i]][,"population"]
# Capture shrinking cities
if(hits[1] >= hits[length(hits)]){
if(!missing(thresh)){
if(max(hits) >= thresh){
cat("Skipping iteration ", i, " because of max population threshold given.\n")
next
}
}
df.all.changers <- rbind(df.all.changers, unique(df.list.crime.changers[[i]][,c("city","state")]))
}
}
#update constants
DF_UNIQUE_DESC_POP_CITY_STATE <- df.all.changers
return(df.all.changers)
}
###################################################################################################
# Note: This function should determine if a city's population is within:
# - epsilon = 1 or 2 * sd(population)
# - target the first population found and the last, determine if they are epsilon apart
# - if so, we will call it stagnant
###################################################################################################
getPopulationStagnant <- function(df.list.crime.changers){
# Life is a journey, and this function is a work in progress
}
###################################################################################################
# Function: getCrimeChangers
# Return: a dataframe of unique city-states who had the crime cluster changes
###################################################################################################
getCrimeChangers <- function(uc_best, uc_worst, df.list){
df.crime.changers <- data.frame(city=c(), state=c())
for(i in 1:length(df.list)){
i1 <- intersect(uc_best,unique(df.list[[i]][,"cluster"]))
i2 <- intersect(uc_worst,unique(df.list[[i]][,"cluster"]))
if( length(i1) >= 1 & length(i2) >= 1){
df.crime.changers <- rbind(df.crime.changers, unique(df.list[[i]][,c("city","state")]))
}
}
#update constants
DF_UNIQUE_CRIME_CHANGERS_CITY_STATE <- df.crime.changers
return(df.crime.changers)
}
###################################################################################################
# Function: get_best_unique_clusters
# Return: All of the unique clusters to the a set of cities inside of the dataframe given
###################################################################################################
get_best_unique_clusters <- function(df_best, df){
df.list.best <- apply(df_best, 1, function(row){df[which(df$city == row[1] & df$state == row[2]),]})
uc <- list()
for(i in 1:length(df.list.best)){
uc <- c(uc, unique(df.list.best[[i]][,"cluster"]))
}
uc <- unique(uc)
return(uc)
}
###################################################################################################
# Function: get_worst_unique_clusters
# Return: All of the unique clusters to the a set of cities inside of the dataframe given
###################################################################################################
get_worst_unique_clusters <- function(df_worst, df){
df.list.worst <- apply(df_worst, 1, function(row){df[which(df$city == row[1] & df$state == row[2]),]})
uc <- list()
for(i in 1:length(df.list.worst)){
uc <- c(uc, unique(df.list.worst[[i]][,"cluster"]))
}
uc <- unique(uc)
return(uc)
}
###################################################################################################
###################################################################################################
plot_all_unique_cities <- function(uniqueCityList, df, better_or_worse)
{
plt <- ggplot()
for(i in 1:nrow(uniqueCityList))
{
cat("Working: ", i)
plt <- plt + geom_line(data=df[which(df$city == uniqueCityList[i,1] &
df$state == uniqueCityList[i,2]),c("year","population","cluster","city","state")],
aes(x=year, y=cluster, color=cluster))
#plt <- plt + geom_text(aes(y = max(df[which(df$city == df_increasing_worse_city_state[i,1] &
#                                df$state == df_increasing_worse_city_state[i,2]),"population"]),
#            x = 30,
#            label = paste(df_increasing_worse_city_state[i,1], df_increasing_worse_city_state[i,2], sep=",")))
}
plt <- plt + scale_colour_gradient(limits=c(1, 10), low="red", high="green")
#p + scale_colour_manual( values = c("8" = "red","4" = "blue","6" = "green"))
if(better_or_worse == "better"){
plt <- plt + ggtitle("Population Increasing Cities | Crime Patterns Bettering",
subtitle="Worse Crime Clusters = 1-2 | Best Crime Clusters = 6-8")
}
if(better_or_worse == "worse"){
plt <- plt + ggtitle("Population Increasing Cities | Crime Patterns Worsening",
subtitle="Worse Crime Clusters = 1-2 | Best Crime Clusters = 6-8")
}
if(better_or_worse == "increase"){
plt <- plt + ggtitle("Cities With Drastic Population Increasing")
}
if(better_or_worse == "decrease"){
plt <- plt + ggtitle("Cities With Drastic Population Decrease")
}
if(better_or_worse == "stagnant"){
plt <- plt + ggtitle("Cities With No Significant Population Increasing or Decrease")
}
# Make the plot interactive so that I can see the city state on hover
plt2 <- ggplotly(plt)
plt2 <- plt2 %>% layout(showlegend = FALSE)
return(plt2)
}
###########################################################################################
# Code used to generate (Group 1) -- Drastic population increasers
###########################################################################################
###########################################################################################
find2014Above50K <- function(df.list){
container <- data.frame(city=c(), state=c())
for(i in 1:length(df.list)){
hit <- df.list[[i]][which(df.list[[i]][,"year"] == 35 &
df.list[[i]][,"population"] >= 50000), c("year","population")]
if(nrow(hit) > 0){
cat("Processed: ", i, "\t")
container <- rbind(container, unique(df.list[[i]][,c("city","state")]))
}else{ }
}
return(container)
}
findMinYearBelow10K <- function(df.list.above){
container <- data.frame(city=c(), state=c())
for(i in 1:length(df.list.above)){
hit<- df.list.above[[i]][which(df.list.above[[i]][,"year"] == min(df.list.above[[i]][,"year"]) &
df.list.above[[i]][,"population"] <= 10000),]
if(nrow(hit) > 0){
cat("Storing ", i, " ")
container <- rbind(container, unique(df.list.above[[i]][,c("city","state")]))
}else{ }
}
return(container)
}
###########################################################################################
# Code used to generate (Group 2) -- Stagnant cities
###########################################################################################
###########################################################################################
find1979to2014Stagnants <- function(df.list){
container <- data.frame(city=c(), state=c())
for(i in 1:length(df.list)){
# The goal here is to find the populations whos start index "1" is about the same as their end index "n"
# This is done by checking if the final is within a + or - standard deviation of the first.
n = nrow(df.list[[i]])
dev = sd(df.list[[i]][,"population"])
the_max <- df.list[[i]][1,"population"] + dev
the_min <- df.list[[i]][1, "population"] - dev
eh1 <- df.list[[i]][n,"population"] <= the_max
eh2 <- df.list[[i]][n, "population"] >= the_min
if(!is.na(eh1) & !is.na(eh2)){
if(eh1 & eh2){
container <- rbind(container, unique(df.list[[i]][,c("city","state")]))
}
}
#cat(i,"\t",eh1,"\t",eh2,"\n")
}
return(container)
}
###########################################################################################
# Code used to generate (Group 3) -- Drastic population decreasers
###########################################################################################
###########################################################################################
find1979Above50K <- function(df.list.above){
container <- data.frame(city=c(), state=c())
for(i in 1:length(df.list.above)){
hit <- df.list.above[[i]][which(df.list.above[[i]][,"year"] == 1 &
df.list.above[[i]][,"population"] >= 50000), c("year","population")]
if(nrow(hit) > 0){
container <- rbind(container, unique(df.list.above[[i]][,c("city","state")]))
}else{ }
}
return(container)
}
find2014Below10K <- function(df.list.above){
container <- data.frame(city=c(), state=c())
for(i in 1:length(df.list.above)){
hit <- df.list.above[[i]][which(df.list.above[[i]][,"year"] == 35 &
df.list.above[[i]][,"population"] <= 10000), c("year","population")]
if(nrow(hit) > 0){
container <- rbind(container, unique(df.list.above[[i]][,c("city","state")]))
}else{ }
}
return(container)
}
# only 3 bins
# if > 1  == 0
# if < -1 == 1
# else    == 2
getBin <- function(someNumber){
# Population increase
if(someNumber > 0){
return(0)
}
# Population Decrease
else if(someNumber < 0 ){
return(1)
}
# Population Stagnant
else{
return(2)
}
}
##########################################
# get average year population growth
#########################################
getAYPI <- function(df.list.b){
df_city_aypi <- data.frame(city=c(),aypi=c(),population=c(), bin=c())
for(i in 1:length(df.list.b)){ # each city_i
# Target our city of interest
#cat("Working on :", df.list[[i]][,"city"][1], " ", df.list[[i]][,"state"], "\n")
df_year_pop <- df.list.b[[i]][order(-df.list.b[[i]][,"year"]),c("year","population")]
# drop duplicate rows
#df_year_pop <- df_year_pop[!duplicated(df_year_pop[,c("city","state","year")]),]
val=0
n = (nrow(df_year_pop)-1)
for(j in 1:n){ #execute equation
tmp = (df_year_pop[j,"population"] - df_year_pop[j+1,"population"] ) / df_year_pop[j+1,"population"]
val = val + tmp
}
val = (val / n)
# Store our results
name <- df.list.b[[i]][order(-df.list.b[[i]][,"population"]),c("city")]
pop2014 <- df.list.b[[i]][order(-df.list.b[[i]][,"year"]),c("population")][1]
binCategory <- getBin(val)
df_city_aypi[i,"city"] <- name[1]
df_city_aypi[i, "aypi"] <- val
df_city_aypi[i, "population"] <- pop2014
df_city_aypi[i, "bin"] <- binCategory
# Confirm results
cat("Storing: ", df_city_aypi[i,"city"], ":", df_city_aypi[i,"aypi"], "\n")
}
return(df_city_aypi)
}
df_city_aypi = getAYPI(df.list.2014above50k) # my aypi's are calculating things correctly.
df_city_aypi[df_city_aypi$bin == "0",]
df_city_aypi[df_city_aypi$bin == "2",]
numGrowers <- nrow(df_city_aypi[df_city_aypi$bin == "0",])
numShrinkers <- nrow(df_city_aypi[df_city_aypi$bin == "1",])
cat(numGrowers,"\t",numShrinkers)
ggplot() + geom_bar(data=c(numGrowers, numShrinkers))
data.frame(growers=numGrowers, shrinkers=numShrinkers)
ggplot() + geom_bar(data.frame(growers=numGrowers, shrinkers=numShrinkers))
ggplot() + geom_bar(data.frame(growers=numGrowers, shrinkers=numShrinkers), aes())
ggplot() + geom_bar(data.frame(growers=numGrowers, shrinkers=numShrinkers), aes(x=growers))
df_bar <- data.frame(changers=c("Increasing Population","Decreasing Population"),
vals=c(numGrowers, numShrinkers))
df_bar
ggplot() + geom_bar(data=df_bar, aes(x=changers, y=vals, color=changers))
ggplot() + geom_bar(data=df_bar, aes(x=changers))
ggplot() + geom_bar(data=df_city_aypi$bin, aes(x=bin))
ggplot() + geom_bar(data=df_city_aypi, aes(x=bin))
ggplot() + geom_bar(data=df_city_aypi, aes(x=bin, fill=bin))
ggplot() + geom_bar(data=df_city_aypi, aes(x=bin, fill=bin, color=bin))
ggplot() + geom_bar(data=df_city_aypi, aes(x=bin, fill=bin, color=city=))
ggplot() + geom_bar(data=df_city_aypi, aes(x=bin, fill=bin, color=city))
ggplot() + geom_bar(data=df_city_aypi, aes(x=bin, color=city))
ggplot() + geom_bar(data=df_city_aypi, aes(x=bin))
ggplot() + geom_bar(data=df_city_aypi, aes(factor(bin))) + ggtitle("Cities with growth")
ggplot(df_bar, aes(factor(bin))) +
geom_bar(fill = 2) +
geom_text(stat="bin", aes(label = ..count.., y=(..count..-..count..)+5))
ggplot(df_bar, aes(bin)) +
geom_bar(fill = 2) +
geom_text(stat="bin", aes(label = ..count.., y=(..count..-..count..)+5))
ggplot() + geom_bar(data=df_city_aypi, aes(x=bin), fill=2) + ggtitle("Cities with growth")
df_bar
df_bar
df_city_aypi
ggplot() + geom_bar(data=df_city_aypi, aes(x=bin)) + ggtitle("Cities with growth")
ggplot() + geom_bar(data=df_city_aypi, aes(x=bin)) + geom_bar(fill = 2) +
geom_text(stat="bin", aes(label = ..count..))
ggplot() + geom_bar(data=df_city_aypi, aes(x=bin)) + ggtitle("Cities with growth")
ggplot() + geom_bar(data=df_city_aypi, aes(x=factor(bin))) + ggtitle("Cities with growth")
ggplot() + geom_bar(data=df_city_aypi, aes(x=as.factor(bin))) + ggtitle("Cities with growth")
ggplot() + geom_bar(data=df_city_aypi, aes(x=(bin))) + coord_flip() + ggtitle("Cities with growth")
plt <- ggplot() + geom_bar(data=df_city_aypi, aes(x=(bin))) + ggtitle("Cities with growth")
plt <- ggplot() + geom_bar(data=df_city_aypi, aes(x=(bin), color=unique(bin))) + ggtitle("Cities with growth")
plt
df_city_aypi$bin <- as.factor(df_city_aypi$bin)
plt <- ggplot() + geom_bar(data=df_city_aypi, aes(x=factor(bin))) + ggtitle("Cities with growth")
plt
plt <- ggplot() + geom_bar(data=df_city_aypi, aes(x=factor(bin))) + ggtitle("2014 City Population Greater Than 50,000 People", subtitle="Group 1: Average Year Population Increasing | Group 2: Average Year Population Decreasing")
plt
plt <- plt + theme(plot.title = element_text(face="bold",size="18"),
plot.subtitle = element_text(size="14"),
axis.text = element_text(family = "mono",color="black"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
panel.grid.major = element_line(colour="#CDCDCD"),
panel.grid.minor = element_line(colour="#F0F0F0"),
panel.background = element_rect(fill = "#F0F0F0"),
plot.background = element_rect(fill = "#F0F0F0"))
plt
plt <- plt + theme(plot.title = element_text(face="bold",size="18"),
plot.subtitle = element_text(size="12"),
axis.text = element_text(family = "mono",color="black"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
panel.grid.major = element_line(colour="#CDCDCD"),
panel.grid.minor = element_line(colour="#F0F0F0"),
panel.background = element_rect(fill = "#F0F0F0"),
plot.background = element_rect(fill = "#F0F0F0"))
plt
plt <- plt + theme(plot.title = element_text(face="bold",size="18"),
plot.subtitle = element_text(size="10"),
axis.text = element_text(family = "mono",color="black"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
panel.grid.major = element_line(colour="#CDCDCD"),
panel.grid.minor = element_line(colour="#F0F0F0"),
panel.background = element_rect(fill = "#F0F0F0"),
plot.background = element_rect(fill = "#F0F0F0"))
plt
plt <- ggplot() + geom_bar(data=df_city_aypi, aes(x=factor(bin))) + ggtitle("2014 City Population Greater Than 50,000 People", subtitle="Group 1: Average Year Population Increasing | Group 2: Average Year Population Decreasing") + xlab("City Bins") + ylab("Number of cities")
plt <- plt + theme(plot.title = element_text(face="bold",size="18"),
plot.subtitle = element_text(size="10"),
axis.text = element_text(family = "mono",color="black"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
panel.grid.major = element_line(colour="#CDCDCD"),
panel.grid.minor = element_line(colour="#F0F0F0"),
panel.background = element_rect(fill = "#F0F0F0"),
plot.background = element_rect(fill = "#F0F0F0"))
plt
plt <- ggplot() + geom_bar(data=df_city_aypi, aes(x=factor(bin))) + ggtitle("2014 City Population Greater Than 50,000 People", subtitle="Group 1: Average Year Population Increasing | Group 2: Average Year Population Decreasing") + xlab("City Bins") + ylab("Frequency")
plt <- plt + theme(plot.title = element_text(face="bold",size="18"),
plot.subtitle = element_text(size="10"),
axis.text = element_text(family = "mono",color="black"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
panel.grid.major = element_line(colour="#CDCDCD"),
panel.grid.minor = element_line(colour="#F0F0F0"),
panel.background = element_rect(fill = "#F0F0F0"),
plot.background = element_rect(fill = "#F0F0F0"))
plt
plt <- ggplot() + geom_bar(data=df_city_aypi, aes(x=factor(bin))) + ggtitle("2014 City Population Greater Than 50,000 People", subtitle="Group 1: Average Year Population Increasing | Group 2: Average Year Population Decreasing") + xlab("City Bins") + ylab("Frequency") + xlim(0,1000)
plt <- plt + theme(plot.title = element_text(face="bold",size="18"),
plot.subtitle = element_text(size="10"),
axis.text = element_text(family = "mono",color="black"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
panel.grid.major = element_line(colour="#CDCDCD"),
panel.grid.minor = element_line(colour="#F0F0F0"),
panel.background = element_rect(fill = "#F0F0F0"),
plot.background = element_rect(fill = "#F0F0F0"))
plt
plt <- ggplot() + geom_bar(data=df_city_aypi, aes(x=factor(bin))) + ggtitle("2014 City Population Greater Than 50,000 People", subtitle="Group 1: Average Year Population Increasing | Group 2: Average Year Population Decreasing") + xlab("City Bins") + ylab("Frequency") + xlim(1000)
plt <- plt + theme(plot.title = element_text(face="bold",size="18"),
plot.subtitle = element_text(size="10"),
axis.text = element_text(family = "mono",color="black"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
panel.grid.major = element_line(colour="#CDCDCD"),
panel.grid.minor = element_line(colour="#F0F0F0"),
panel.background = element_rect(fill = "#F0F0F0"),
plot.background = element_rect(fill = "#F0F0F0"))
plt
plt <- ggplot() + geom_bar(data=df_city_aypi, aes(x=factor(bin))) + ggtitle("2014 City Population Greater Than 50,000 People", subtitle="Group 1: Average Year Population Increasing | Group 2: Average Year Population Decreasing") + xlab("City Bins") + ylab("Frequency")
plt <- plt + theme(plot.title = element_text(face="bold",size="18"),
plot.subtitle = element_text(size="10"),
axis.text = element_text(family = "mono",color="black"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
panel.grid.major = element_line(colour="#CDCDCD"),
panel.grid.minor = element_line(colour="#F0F0F0"),
panel.background = element_rect(fill = "#F0F0F0"),
plot.background = element_rect(fill = "#F0F0F0"))
plt
abbrev_x <- c("Avg Year Population Increasing", "Avg Year Population Decreasing")
plt<- plt + scale_x_continuous(breaks = c(seq(0,1,by=1)), labels=abbrev_x)
plt
plt<- plt + scale_x_discrete(breaks = c(0,1), labels=abbrev_x)
plt
plt <- ggplot() + geom_bar(data=df_city_aypi, aes(x=factor(bin))) + ggtitle("City's AYPI from 2014-1979 with 50,000+ People", subtitle="Group 1: Average Year Population Increasing | Group 2: Average Year Population Decreasing") + xlab("City Bins") + ylab("Frequency")
plt <- plt + theme(plot.title = element_text(face="bold",size="18"),
plot.subtitle = element_text(size="10"),
axis.text = element_text(family = "mono",color="black"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
panel.grid.major = element_line(colour="#CDCDCD"),
panel.grid.minor = element_line(colour="#F0F0F0"),
panel.background = element_rect(fill = "#F0F0F0"),
plot.background = element_rect(fill = "#F0F0F0"))
abbrev_x <- c("Avg Year Population Increasing", "Avg Year Population Decreasing")
plt<- plt + scale_x_discrete(breaks = c(0,1), labels=abbrev_x)
plt
plt <- ggplot() + geom_bar(data=df_city_aypi, aes(x=factor(bin))) + ggtitle("AYPI from 1979-2014", subtitle="Cities whose population in 2014 was 50,000 or greater") + xlab("City Bins") + ylab("Frequency")
plt <- ggplot() + geom_bar(data=df_city_aypi, aes(x=factor(bin))) + ggtitle("AYPI from 1979-2014", subtitle="Cities whose population in 2014 was 50,000 or greater") + xlab("City Bins") + ylab("Frequency")
plt <- plt + theme(plot.title = element_text(face="bold",size="18"),
plot.subtitle = element_text(size="10"),
axis.text = element_text(family = "mono",color="black"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
panel.grid.major = element_line(colour="#CDCDCD"),
panel.grid.minor = element_line(colour="#F0F0F0"),
panel.background = element_rect(fill = "#F0F0F0"),
plot.background = element_rect(fill = "#F0F0F0"))
plt<- plt + scale_x_discrete(breaks = c(0,1), labels=abbrev_x)
plt
df_city_aypi$z <- NULL
plt
